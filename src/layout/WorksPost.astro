---
import type { MarkdownInstance } from 'astro';
import type { PostType } from '../types';
import Base from './Base.astro';
import Header from '../components/Header.astro';
import ArchGrid from './grid/ArchGrid.astro';
import FooterPost from '../components/FooterPost.astro';

import '../styles/page/post.scss';
import '../styles/page/entry.scss';
import { thumbnailsClassType } from '../scripts/thumbnailsClassType';

// paginationの作成
export interface Props {
  content: PostType;
}
const { content } = Astro.props;
const currentPagePath = Astro.url.pathname;
const allPosts = await Astro.glob<PostType>('../pages/works/**/*.md');
const sortedAllPosts = allPosts.sort(
  (a, b) =>
    new Date(b.frontmatter.publishDate).valueOf() -
    new Date(a.frontmatter.publishDate).valueOf()
);
const { prev, next } = getPrevAndNextPosts(currentPagePath, sortedAllPosts);
function getPrevAndNextPosts(
  currentSlug: string,
  posts: MarkdownInstance<PostType>[]
) {
  const index = posts.findIndex(({ url }) => url === currentSlug);
  return {
    // 指定indexのpostがなければnullを返す
    prev: posts[index + 1] ?? null,
    next: posts[index - 1] ?? null,
  };
}
const paginationProps = {
  ...(prev && {
    prevUrl: prev.url,
  }),
  ...(next && {
    nextUrl: next.url,
  }),
};

// contentのプロパティが未設定の場合はクラスを付与
const displayCheck = (key: string | {}) => {
  if (key === null) {
    return 'is_empty';
  }
  return;
};
---

<Base>
  <Header />
  <main class="ly_main ly_main__post">
    <ArchGrid>
      <div class="bl_post_meta">
        <div
          class:list={[
            'bl_post_thumbnails',
            'el_thumbnails',
            thumbnailsClassType(content.thumbnailType),
          ]}
        >
          <img
            src="/image/empty.gif"
            alt=""
            data-src={content.thumbnail}
            width="255"
            height="240"
            loading="lazy"
          />
        </div><!-- /.bl_post_thumbnails -->

        <div class="bl_post_meta_titleWrap">
          <div class="bl_post_title bl_common_box">
            <p>{content.title}</p>
          </div><!-- /.bl_post_title -->

          <div class:list={['bl_post_github', displayCheck(content.github)]}>
            <a
              href={content.github}
              class="el_btn el_circleBtn el_circleBtn__blue"
              aria-label="GitHub"
              target="_blank"
              rel="nofollow noopener noreferrer"
            >
              <img
                src="/image/empty.gif"
                alt=""
                width="20"
                height="20"
                data-src="/icon/github.svg"
                loading="lazy"
              />
            </a>
          </div><!-- /.bl_post_github -->
        </div><!-- /.bl_post_meta_titleWrap -->
      </div><!-- /.bl_post_meta -->

      <div class="bl_post_contents">
        <div class="bl_post_comment bl_entry">
          <slot />
        </div><!-- /.bl_post_comment -->

        <div class:list={['bl_post_link', displayCheck(content.link)]}>
          <a
            class="el_btn el_basicBtn"
            href={content.link}
            target="_blank"
            rel="noopener noreferrer"
          >
            サイトをみる
          </a>
        </div><!-- /.bl_post_link -->

        <div class="bl_post_info">
          <dl>
            <dt>担当領域</dt>
            <dd class="bl_post_info_role">
              <ul>
                {content.role && content.role.map(value => <li>{value}</li>)}
              </ul>
            </dd><!-- /.bl_post_info_subSkill -->
          </dl>
          <dl>
            <dt>使用技術</dt>
            <dd class="bl_post_info_skill">
              <ul>
                {content.skill && content.skill.map(value => <li>{value}</li>)}
              </ul>
            </dd>
            <dd
              class:list={[
                'bl_post_info_subSkill',
                displayCheck(content.subSkills),
              ]}
            >
              <ul>
                {
                  content.subSkills &&
                    Object.entries(content.subSkills).map(([key, value]) => (
                      <li>
                        {key}
                        <span>:</span>
                        {value}
                      </li>
                    ))
                }
              </ul>
            </dd><!-- /.bl_post_info_subSkill -->
          </dl>
          <dl>
            <dt>制作期間</dt>
            <dd>{content.period}</dd>
          </dl>
          <dl class="bl_post_info_feature">
            <dt>機能</dt>
            <dd>
              <ul>
                {content.feature.map((list: string) => <li>{list}</li>)}
              </ul>
            </dd>
          </dl>
        </div><!-- /.bl_post_info -->

        <div class:list={['bl_post_mockup', displayCheck(content.mockup)]}>
          <div class="bl_post_mockup_pc">
            <img
              src="/image/empty.gif"
              alt="パソコンサイズのスクリーンショット"
              data-src={content.mockup && content.mockup.pc}
              width="311"
              height="222"
              loading="lazy"
            />
          </div><!-- /.bl_post_mockup_pc -->
          <div class="bl_post_mockup_mobile">
            <img
              src="/image/empty.gif"
              alt="スマホサイズのスクリーンショット"
              data-src={content.mockup && content.mockup.mobile}
              width="96"
              height="190"
              loading="lazy"
            />
          </div><!-- /.bl_post_mockup_mobile -->
        </div><!-- /.bl_post_mockup -->
      </div><!-- /.bl_post_contents -->
    </ArchGrid>
  </main><!-- /.ly_main -->
  <FooterPost {...paginationProps} />
</Base>
