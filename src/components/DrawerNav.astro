---
import PageList from '@/components/PageList';
import SectionList from '@/components/SectionList';

const currentPagePath = Astro.url.pathname;
---

<>
  <div
    id="js_drawerNav"
    class:list={['ly_drawerNav', currentPagePath.includes('works') ? 'is_reverse' : '']}
    aria-label="drawer"
    id="drawerNav"
    aria-hidden="true"
  >
    <div class="ly_drawerNav__inner">
      {
        currentPagePath.includes('works') ? (
          <nav class="bl_drawerNav__section is_canScroll" aria-label="works">
            <SectionList />
          </nav>
        ) : (
          <nav class="bl_drawerNav__page" aria-label="pageList">
            <svg class="el_title_border el_title_border__blue">
              <text x="50%" y="50%" text-anchor="middle" dominant-baseline="central">
                Page
              </text>
            </svg>
            <div class="bl_drawerNav_pageNavWrap">
              <PageList />
            </div>
          </nav>
        )
      }

      <div class="bl_drawerNav_dashLine">
        <img
          src="/portfolio/image/empty.gif"
          data-src="/portfolio/icon/swipe.svg"
          alt="横スクロール"
          width="32"
          height="32"
          loading="lazy"
          decoding="async"
        />
      </div><!-- /.bl_drawerNav_dashLine -->

      {
        currentPagePath.includes('works') ? (
          <nav class="bl_drawerNav__page" aria-label="pageList">
            <svg class="el_title_border el_title_border__blue">
              <text x="50%" y="50%" text-anchor="middle" dominant-baseline="central">
                Page
              </text>
            </svg>
            <div class="bl_drawerNav_pageNavWrap">
              <PageList />
            </div>
          </nav>
        ) : (
          <nav class="bl_drawerNav__section is_canScroll" aria-label="works">
            <SectionList />
          </nav>
        )
      }
    </div><!-- /.bl_drawerNav__inner -->
  </div><!-- /.bl_drawerNav -->

  <style lang="scss">
    @use '../styles/mixin/' as mix;
    @use '../styles/functions/' as *;
    @use '../styles/variables/other' as *;

    .ly_drawerNav {
      visibility: hidden;
      height: 0;
      transition: height 0.4s ease-in-out, visibility 0.4s ease-in-out;
      border-top: 2px solid color(--c-black);
      background: color(--c-bg-toc);

      &.is_show {
        visibility: visible;
        height: 40vh;
      }
    }

    .ly_drawerNav__inner {
      display: flex;
      flex-wrap: nowrap;
      align-items: flex-start;
      height: 100%;
      padding: 0 var(--size-space-sm);
      overflow-x: scroll;
      scroll-snap-type: x mandatory;
      scrollbar-width: none;
      -ms-overflow-style: none;

      &::-webkit-scrollbar {
        display: none;
      }

      @include mix.mq(md) {
        overflow-x: hidden;
      }
    }

    .bl_drawerNav__section {
      display: flex;
      position: relative;
      flex-direction: column;
      flex-shrink: 0;
      width: 100%;
      max-width: 480px;
      height: inherit;
      padding: var(--size-space-lg) var(--size-space-xl) var(--size-space-lg) var(--size-space-lg);
      overflow-y: scroll;
      text-align: left;
      scroll-snap-align: center;
      gap: var(--size-space-lg);

      &::-webkit-scrollbar {
        width: 10px;
      }

      &::-webkit-scrollbar-thumb {
        border: 2px solid color(--c-black);
        border-radius: 20px;
        background: color(--c-secondary);
      }

      &::-webkit-scrollbar-track {
        margin-top: 16px;
        margin-bottom: 16px;
      }

      @include mix.mq(md) {
        width: 70%;
        max-width: none;
      }
    }

    .bl_drawerNav_dashLine {
      position: relative;
      flex-shrink: 0;
      width: 32px;
      height: 100%;
      margin-left: -32px;

      &::before {
        content: '';
        position: absolute;
        top: 0;
        right: 50%;
        width: 2px;
        height: 100%;
        transform: translateX(-50%);
        background: linear-gradient(to bottom, color(--c-black) 8px, transparent 8px) repeat-y left bottom / 2px 16px;
      }

      img {
        position: absolute;
        top: 50%;
        width: 32px;
        height: 32px;
        transform: translateY(-50%);
        animation: swipeIconAnime 3s ease-in-out infinite;
        background: color(--c-bg-toc);
      }

      @include mix.mq(md) {
        img {
          display: none;
        }
      }
    }

    @keyframes swipeIconAnime {
      0% {
        rotate: 0deg;
      }

      30% {
        rotate: -20deg;
      }

      50% {
        rotate: 20deg;
      }

      100% {
        rotate: 0deg;
      }
    }

    .bl_drawerNav_pageNavWrap {
      margin-top: var(--size-space-md);
    }

    .bl_drawerNav__page {
      flex-shrink: 0;
      scroll-snap-align: center;
      width: fit-content;
      padding: var(--size-space-lg) var(--size-space-lg) 0;

      svg {
        width: 78px;
      }

      text {
        font-size: rem(20px);
        letter-spacing: 6px;
      }

      a {
        font-size: rem(16px);
        font-weight: bold;
      }
    }

    .ly_drawerNav.is_reverse {
      .bl_drawerNav__section {
        align-items: flex-end;
        direction: rtl;
      }
    }
  </style>

  <script>
    /** **********************
     * ドロワーの開閉制御
     ************************* */
    const btn = document.getElementById('js_drawerNav_btn') as HTMLButtonElement | null;
    const nav = document.getElementById('js_drawerNav') as HTMLDivElement | null;
    const btnTitle = btn?.querySelector('text');
    const footer = document.querySelector('footer');

    /** コンテンツ表示処理 */
    const openContents = () => {
      nav?.classList.add('is_show');
      document.body.classList.add('is_scrollLock');
      btn?.setAttribute('aria-expanded', 'true');
      btn?.setAttribute('aria-label', 'メニューを閉じる');
      nav?.setAttribute('aria-hidden', 'false');
      btnTitle!.textContent = 'とじる';
    };

    /** コンテンツ非表示処理 */
    const closeContents = () => {
      nav?.classList.remove('is_show');
      document.body.classList.remove('is_scrollLock');
      btn?.setAttribute('aria-expanded', 'false');
      btn?.setAttribute('aria-label', 'メニューを開く');
      nav?.setAttribute('aria-hidden', 'true');
      btnTitle!.textContent = 'もくじ';
    };

    /** ドロワー開閉ボタンクリック時の挙動 */
    btn?.addEventListener('click', event => {
      const isShow = nav?.classList.contains('is_show');
      event.stopPropagation();
      if (!isShow) {
        openContents();
        document.addEventListener('touchmove', scrollLock, { passive: false });
        focusFirstElement(nav!);
      } else {
        closeContents();
        document.removeEventListener('touchmove', scrollLock);
      }
      focusBackContents();
    });

    /** ドロワーメニュー外クリック時の挙動 */
    document.addEventListener('click', event => {
      const isShow = nav?.classList.contains('is_show');
      if (event.target instanceof HTMLElement && !event.target.closest('#js_drawerNav') && isShow) {
        closeContents();
        document.removeEventListener('touchmove', scrollLock);
        focusBackContents();
      }
    });

    /** ドロワーメニュー外タッチ時の挙動 */
    document.addEventListener(
      'touchmove',
      event => {
        const isShow = nav?.classList.contains('is_show');
        if (event.target instanceof HTMLElement && !event.target.closest('#js_drawerNav') && isShow) {
          closeContents();
          document.removeEventListener('touchmove', scrollLock);
          focusBackContents();
        }
      },
      { passive: false }
    );

    /** Escapeキー選択時の挙動 */
    footer?.addEventListener('keydown', event => {
      if (event.code === 'Escape') {
        closeContents();
        btn?.focus();
      }
    });

    /**
     * スクロール可不可チェック
     * @param element スクロール可能対象要素
     */
    const isScrollable = (element: Element) => element.clientHeight < element.scrollHeight;

    /** スクロールロック制御 */
    const scrollLock = (event: TouchEvent) => {
      const canScrollElement = (event.target as HTMLElement)?.closest('.is_canScroll');
      if (canScrollElement === null) {
        event.preventDefault();
        return;
      }

      if (canScrollElement && isScrollable(canScrollElement)) {
        event.stopPropagation();
      } else {
        event.preventDefault();
      }
    };

    /**
     * 最初の要素にフォーカス移動
     * @param parentElement フォーカス要素の親
     */
    const focusFirstElement = (parentElement: HTMLElement) => {
      const focusElements = parentElement.querySelectorAll('a, button') as NodeListOf<
        HTMLAnchorElement | HTMLButtonElement
      >;
      focusElements[0].focus();
    };

    /** ドロワー外のフォーカス制御 */
    const focusBackContents = () => {
      const header = document.querySelectorAll('header a, header button') as NodeListOf<HTMLElement>;
      const main = document.querySelectorAll(
        'main a, main button, main input, main textarea'
      ) as NodeListOf<HTMLElement>;
      const notFocusElements = document.querySelectorAll('.js_notFocus') as NodeListOf<HTMLElement>;
      const hiddenElements = [...header, ...main, ...notFocusElements];

      hiddenElements.forEach(element => {
        if (element.classList.contains('is_focusDisable')) {
          element.removeAttribute('aria-hidden');
          [...notFocusElements].includes(element)
            ? element.setAttribute('tabindex', '0')
            : element.removeAttribute('tabindex');
          element.classList.remove('is_focusDisable');
        } else {
          element.setAttribute('aria-hidden', 'true');
          element.setAttribute('tabindex', '-1');
          element.classList.add('is_focusDisable');
        }
      });
    };
  </script>
</>
