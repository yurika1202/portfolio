---
import type { PostType } from '@/types';
import Base from '@/layouts/Base';
import PageTitle from '@/components/PageTitle';
import WorksCard from '@/components/WorksCard';
import Footer from '@/components/Footer';

const meta = {
  title: '実績と自主制作',
  description: '実績と自主制作のリストです。',
};
const pageLink = {
  prevPath: '/about',
  prevLabel: '自己紹介ページへ戻る',
  nextPath: '/contact',
  nextLabel: 'お問い合わせページへ進む',
};

const posts = await Astro.glob<PostType>('./posts/**/*.md');
const pracWorks = await Astro.glob<PostType>('./posts/prac/**/*.md');
const indieWorks = await Astro.glob<PostType>('./posts/indie/**/*.md');
---

<Base meta={meta} gridType={'arch'}>
  <div class="bl_cursor" id="js_cursor"></div>

  <PageTitle type={'icon'} />

  <div class="bl_works_tabs" role="tablist">
    <button class="el_btn el_rectBtn" type="button" id="tab-all" role="tab" aria-selected="true" aria-controls="tabpanel-all"> すべて</button>
    <button class="el_btn el_rectBtn" type="button" id="tab-prac" role="tab" aria-selected="false" aria-controls="tabpanel-prac" tabindex="-1"> 実績</button>
    <button class="el_btn el_rectBtn" type="button" id="tab-indie" role="tab" aria-selected="false" aria-controls="tabpanel-indie" tabindex="-1"> 自主制作</button>
  </div>

  <section class="bl_works_tabpanel" id="tabpanel-all" role="tabpanel" aria-labelledby="tab-all">
    <ul class="bl_works_list">
      {posts.map(post => <WorksCard works={post} />)}
    </ul><!-- /.bl_works_list -->
  </section><!-- /.bl_works_list -->

  <section class="bl_works_tabpanel is_hidden" id="tabpanel-prac" role="tabpanel" aria-labelledby="tab-prac">
    <ul class="bl_works_list">
      {pracWorks.map(prac => <WorksCard works={prac} />)}
    </ul><!-- /.bl_works_list -->
  </section><!-- /.bl_works_list -->

  <section class="bl_works_tabpanel is_hidden" id="tabpanel-indie" role="tabpanel" aria-labelledby="tab-indie">
    <ul class="bl_works_list">
      {indieWorks.map(indie => <WorksCard works={indie} />)}
    </ul><!-- /.bl_works_list -->
  </section><!-- /.bl_works_list -->
</Base>

<Footer {...pageLink} />

<style lang="scss">
  @use '../styles/mixin/' as mix;
  @use '../styles/functions' as *;

  .bl_works_tabs {
    display: flex;
    gap: var(--size-space-sm);
    justify-content: center;
    margin: var(--size-space-2xl) auto 0;
    font-weight: bold;
    text-align: center;

    @include mix.mq(sm) {
      width: 80%;
    }
  }

  .bl_works_tabpanel {
    position: relative;
    margin-top: var(--size-space-2xl);

    &.is_hidden {
      display: none;
      opacity: 0;
    }
  }

  .bl_works_sectionTitle {
    position: relative;
    top: 0;
    left: -24px;
    padding: 1.429em;

    p {
      line-height: 1.3;
    }
  }

  .bl_works_list {
    display: grid;
    grid-auto-columns: 100%;
    grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));
    width: 100%;
    margin-top: var(--size-space-lg);
    column-gap: var(--size-space-lg);
    justify-items: center;
    row-gap: var(--size-space-2xl);

    @include mix.mq(lg) {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }
  }

  .bl_cursor {
    position: fixed;
    z-index: 1;
    top: -30px;
    left: -100px;
    width: 8em;
    transform: translate(0, 0);
    pointer-events: none;

    &::before {
      content: '詳細をみる';
      display: block;
      visibility: hidden;
      position: absolute;
      top: 0;
      left: 0;
      width: fit-content;
      height: fit-content;
      padding: 0.5em 1em;
      transition: scale 0.3s cubic-bezier(0.12, 0.44, 0.38, 0.73), visibility 0.1s ease;
      border: 2px solid color(--c-black);
      border-radius: 20px;
      background: color(--c-bg-cursor);
      color: color(--c-white);
      scale: 0;
    }

    &.is_hoverDisplay {
      &::before {
        visibility: visible;
        scale: 1;
      }
    }
  }
</style>

<script>
  import 'typed-query-selector';

  /** ****************
   * タブ制御
   * *****************/
  const tabList = document.querySelector('div[role="tablist"]');
  const tabs = [...tabList?.querySelectorAll('button[role="tab"]')];
  let firstTab: null | HTMLButtonElement = null;
  let lastTab: null | HTMLButtonElement = null;
  let tabPanels: HTMLElement[] = [];

  /** タブクリック時のイベント */
  const onClick = (event: Event) => {
    if (event.target instanceof HTMLButtonElement) {
      setSelectedTab(event.target, true);
    }
  };

  /** タブ内でのキーボード操作イベント */
  const onKeyDown = (event: KeyboardEvent) => {
    if (event.currentTarget instanceof HTMLButtonElement) {
      const target = event.currentTarget;
      let flag = false;
      switch (event.key) {
        case 'ArrowLeft':
          setSelectedToPreviousTab(target);
          flag = true;
          break;
        case 'ArrowRight':
          setSelectedToNextTab(target);
          flag = true;
          break;
        case 'Home':
          setSelectedTab(firstTab!);
          flag = true;
          break;
        case 'End':
          setSelectedTab(lastTab!);
          flag = true;
          break;
        default:
          break;
      }
      if (flag) {
        event.stopPropagation();
        event.preventDefault();
      }
    }
  };

  /** タブ選択時 */
  const setSelectedTab = (currentTab: HTMLButtonElement, setFocus = true) => {
    tabs.forEach((tab, index) => {
      if (currentTab === tab) {
        tab.setAttribute('aria-selected', 'true');
        tab.removeAttribute('tabindex');
        tabPanels[index].classList.remove('is_hidden');
        // setFocus値がtrueならフォーカスをあてる
        setFocus && tab.focus();
      } else {
        tab.setAttribute('aria-selected', 'false');
        tab.tabIndex = -1;
        tabPanels[index].classList.add('is_hidden');
      }
    });
  };

  /** 選択タブのひとつ前のタブにフォーカスをあてる */
  const setSelectedToPreviousTab = (currentTab: HTMLButtonElement) => {
    let index: number;
    if (currentTab === firstTab) {
      setSelectedTab(lastTab!);
    } else {
      index = tabs.indexOf(currentTab);
      setSelectedTab(tabs[index - 1]);
    }
  };

  /** 選択タブのひとつ次のタブにフォーカスをあてる */
  const setSelectedToNextTab = (currentTab: HTMLButtonElement) => {
    let index;
    if (currentTab === lastTab) {
      setSelectedTab(firstTab!);
    } else {
      index = tabs.indexOf(currentTab);
      setSelectedTab(tabs[index + 1]);
    }
  };

  /** 各タブにイベント登録 */
  for (const tab of tabs) {
    const tabPanel = document.getElementById(tab.getAttribute('aria-controls')!);
    if (tabPanels) tabPanels.push(tabPanel!);
    tab.tabIndex = -1;
    tab.setAttribute('aria-selected', 'false');
    tab.addEventListener('click', onClick);
    tab.addEventListener('keydown', { handleEvent: onKeyDown });
    firstTab = firstTab ?? tab;
    lastTab = tab;
  }
  setSelectedTab(firstTab!, false);

  /** *******************
   * 追従カーソル
   ******************** */
  /** マウスに合わせて追従 */
  const mouseTracking = (target: HTMLElement) => {
    document.addEventListener(
      'mousemove',
      (event: MouseEventInit) => {
        target.style.transform = `translate(${event.clientX}px, ${event.clientY}px)`;
      },
      { passive: true }
    );
  };

  /** オリジナルカーソルの表示/非表示 */
  const cursorDisplay = (target: HTMLElement) => {
    const hoverDisplayElements = document.querySelectorAll('.js_cursor_displayElement');
    hoverDisplayElements.forEach(element => {
      element.addEventListener(
        'mouseover',
        () => {
          target.classList.add('is_hoverDisplay');
        },
        { passive: true }
      );
      element.addEventListener(
        'mouseleave',
        () => {
          target.classList.remove('is_hoverDisplay');
        },
        { passive: true }
      );
    });
  };

  if (!/iPhone|iPad|Android|Mobile/.test(navigator.userAgent)) {
    const cursor = document.getElementById('js_cursor');
    if (cursor) {
      mouseTracking(cursor);
      cursorDisplay(cursor);
    }
  }
</script>
